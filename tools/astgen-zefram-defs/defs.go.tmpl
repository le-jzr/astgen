//// This file was generated from defs.go.tmpl, DO NOT MODIFY.
//
// package main
// import "github.com/zarevucky/astgen"
// import "fmt"

////////////////////////////////////////////////////////////////////////////////////////////////////

// func emitZeframOption(t *astgen.OptionType) {

type AST/* t.Name */ = /* optionList(t) */

// }

////////////////////////////////////////////////////////////////////////////////////////////////////

// func emitZeframStruct(t *astgen.StructType) {

type AST/* t.Name */ = struct {
	ASTBase
	
	// for _, memb := range t.Members {
	_/* memb.Name */: /* zeframType(&memb, true) */
	// }
}

func new_AST/* t.Name */(//
// for i, memb := range t.Members {
//	if i != 0 {
, //
//	}
_/* memb.Name */: /* zeframType(&memb, true) */ //
// }
) (ret: own *AST/* t.Name */)
{
	ret = new(AST/* t.Name */)

	// for _, memb := range t.Members {

	ret._/* memb.Name */ = @_/* memb.Name */

	// }

	return ret
}

func (node: *AST/* t.Name */) copy() (ret: own *AST/* t.Name */)
{
	
	if node == null {
		return null
	}
	
	ret = new(AST/* t.Name */)
	
	// for _, m := range t.Members {

	// if m.Array {
	ret._/* m.Name */ = node.copy_/* m.Name */()
	// } else {

	// switch m.Type.(type) {
	// case *astgen.BoolType, *astgen.EnumType:
	ret._/* m.Name */ = node._/* m.Name */

	// case *astgen.LexicalType: 
	// if m.Nullable {
	ret._/* m.Name */ = new(string)
	*ret._/* m.Name */ = *node._/* m.Name */
	// } else {
	ret._/* m.Name */ = node._/* m.Name */
	// }

	// case *astgen.OptionType, *astgen.StructType:
	if node._/* m.Name */ != null {
		ret._/* m.Name */ = node._/* m.Name */.copy()
	}
	// }
	// }
	// }
	
	return ret
}

// for _, m := range t.Members {
// 
// 	if !m.Array {
//		continue
// 	}
// 
// 	typ := "<error>"
//	copy := false
// 	switch m.Type.(type) {
// 	case *astgen.BoolType:
//		typ = "bool"
//		copy = true
//	case *astgen.StructType:
//		typ = "*AST" + m.Type.Common().Name
//	case *astgen.LexicalType:
//		typ = "string"
//		copy = true
//	case *astgen.OptionType:
//		typ = "*AST" + m.Type.Common().Name
//	case *astgen.EnumType:
//		typ = "AST" + m.Type.Common().Name
//		copy = true
//	default:
//		print(m.Type.Common().Name)
//		// Cause a panic with type info.
//		_ = m.Type.(*astgen.StructType)
//	}
//
// if typ[0] == '*' {
//		typ = "own " + typ
// }
//

func (node: *AST/* t.Name */) copy_/* m.Name */() (ret: own *[]/* typ */)
{
	
	ret = new[len(node._/* m.Name */)](/* typ */)
	
	// if copy {
	var i = 0
	while i < len(ret) {
		ret[i] = node._/* m.Name */[i]
		i++
	}
	// } else {

	var i = 0
	while i < len(node._/* m.Name */) {
		if node._/* m.Name */[i] != null {
			ret[i] = node._/* m.Name */[i].copy()
		}
		i++
	}
	
	// }
	
	return
}

// }
// }

////////////////////////////////////////////////////////////////////////////////////////////////////

// func emitZeframEnum(t *astgen.EnumType) {
type AST/* t.Name */ = struct {
	value: int
}
////const (
////	// for i, tok := range t.EnumTokens {
////	AST_/* tok.Name */ = AST_/* t.Name */(/* i */)
////	// }
////)
// }
