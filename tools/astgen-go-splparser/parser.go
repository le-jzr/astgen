// This file was generated from goparser.go.tmpl, DO NOT MODIFY.

package main
import "fmt"
import "github.com/zarevucky/astgen"
func emitOptionType(t *astgen.OptionType) {
fmt.Print("func ParseAST")
fmt.Printf("%v",  t.Name )
fmt.Print("(p *spl.SeqParser) (ret AST")
fmt.Printf("%v",  t.Name )
fmt.Print(", err error) {\n")
fmt.Print("\tif !p.IsList() {\n")
fmt.Print("\t\terr = fmt.Errorf(\"ParseAST")
fmt.Printf("%v",  t.Name )
fmt.Print(": Expected list start at %d:%d.\", p.Line(), p.Column())\n")
fmt.Print("\t\treturn\n")
fmt.Print("\t}\n")
fmt.Print("\t\n")
fmt.Print("\tp.Down()\n")
fmt.Print("\t\n")
fmt.Print("\tif p.IsEnd() {\n")
fmt.Print("\t\tp.Up()\n")
fmt.Print("\t\treturn nil, nil\n")
fmt.Print("\t}\n")
fmt.Print("\t\n")
fmt.Print("\tif !p.IsString() {\n")
fmt.Print("\t\terr = fmt.Errorf(\"ParseAST")
fmt.Printf("%v",  t.Name )
fmt.Print(": Expected string at %d:%d.\", p.Line(), p.Column())\n")
fmt.Print("\t\treturn\n")
fmt.Print("\t}\n")
fmt.Print("\t\n")
fmt.Print("\ttag := p.String()\n")
fmt.Print("\t\n")
fmt.Print("\tif p.IsEnd() {\n")
fmt.Print("\t\terr = fmt.Errorf(\"ParseAST")
fmt.Printf("%v",  t.Name )
fmt.Print(": Unexpected list end at %d:%d.\", p.Line(), p.Column())\n")
fmt.Print("\t\treturn\n")
fmt.Print("\t}\n")
fmt.Print("\t\n")
fmt.Print("\tswitch tag {\n")
for _, tn := range t.ConcreteTypes() {
fmt.Print("\tcase \"")
fmt.Printf("%v",  tn )
fmt.Print("\":\n")
fmt.Print("\t\tret, err = ParseAST")
fmt.Printf("%v",  tn )
fmt.Print("(p)\n")
}
fmt.Print("\tdefault:\n")
fmt.Print("\t\terr = fmt.Errorf(\"ParseAST")
fmt.Printf("%v",  t.Name )
fmt.Print(": Unknown tag %s before %d:%d.\", tag, p.Line(), p.Column())\n")
fmt.Print("\t\treturn\n")
fmt.Print("\t}\n")
fmt.Print("\t\n")
fmt.Print("\tif err != nil {\n")
fmt.Print("\t\treturn\n")
fmt.Print("\t}\n")
fmt.Print("\t\n")
fmt.Print("\tif !p.IsEnd() {\n")
fmt.Print("\t\terr = fmt.Errorf(\"ParseAST")
fmt.Printf("%v",  t.Name )
fmt.Print(": Expected list end at %d:%d.\", p.Line(), p.Column())\n")
fmt.Print("\t\treturn\n")
fmt.Print("\t}\n")
fmt.Print("\t\n")
fmt.Print("\tp.Up()\n")
fmt.Print("\t\n")
fmt.Print("\treturn ret, nil\n")
fmt.Print("}\n")
}
func emitEnumType(t *astgen.EnumType) {
fmt.Print("func ParseAST")
fmt.Printf("%v",  t.Name )
fmt.Print("(p *spl.SeqParser) (ret AST")
fmt.Printf("%v",  t.Name )
fmt.Print(", err error) {\n")
fmt.Print("\tif !p.IsString() {\n")
fmt.Print("\t\terr = fmt.Errorf(\"ParseAST")
fmt.Printf("%v",  t.Name )
fmt.Print(": Expected string at %d:%d.\", p.Line(), p.Column())\n")
fmt.Print("\t\treturn\n")
fmt.Print("\t}\n")
fmt.Print("\t\n")
fmt.Print("\ttag := p.String()\n")
fmt.Print("\t\n")
fmt.Print("\tswitch tag {\n")
for _, tok := range t.EnumTokens {
fmt.Print("\tcase \"")
fmt.Printf("%v",  tok.Name )
fmt.Print("\":\n")
fmt.Print("\t\treturn AST")
fmt.Printf("%v",  t.Name )
fmt.Print("_")
fmt.Printf("%v",  tok.Name )
fmt.Print(", nil\n")
}
fmt.Print("\tdefault:\n")
fmt.Print("\t\terr = fmt.Errorf(\"ParseAST")
fmt.Printf("%v",  t.Name )
fmt.Print(": Unknown tag %s before %d:%d.\", p.Line(), p.Column())\n")
fmt.Print("\t\treturn\n")
fmt.Print("\t}\n")
fmt.Print("}\n")
}
func goTypeName(t astgen.Type) string {
	switch t.(type) {
	case *astgen.StructType:
		return "*AST" + t.Common().Name
	case *astgen.LexicalType:
		return "string"
	case *astgen.BoolType:
		return "bool"
	default:
		return "AST" + t.Common().Name
	}
}
func emitStructType(t *astgen.StructType) {
fmt.Print("func ParseAST")
fmt.Printf("%v",  t.Name )
fmt.Print("(p *spl.SeqParser) (ret *AST")
fmt.Printf("%v",  t.Name )
fmt.Print(", err error) {\n")
fmt.Print("\tif !p.IsList() {\n")
fmt.Print("\t\terr = fmt.Errorf(\"ParseAST")
fmt.Printf("%v",  t.Name )
fmt.Print(": Expected list start at %d:%d.\", p.Line(), p.Column())\n")
fmt.Print("\t\treturn\n")
fmt.Print("\t}\n")
fmt.Print("\t\n")
fmt.Print("\tp.Down()\n")
fmt.Print("\t\n")
fmt.Print("\tif p.IsEnd() {\n")
fmt.Print("\t\tp.Up()\n")
fmt.Print("\t\treturn nil, nil\n")
fmt.Print("\t}\n")
fmt.Print("\t\n")
fmt.Print("\tret = new(AST")
fmt.Printf("%v",  t.Name )
fmt.Print(")\n")
for _, m := range t.Members {
fmt.Print("\t\n")
fmt.Print("\tif p.IsEnd() {\n")
fmt.Print("\t\terr = fmt.Errorf(\"ParseAST")
fmt.Printf("%v",  t.Name )
fmt.Print(": Unexpected list end at %d:%d.\", p.Line(), p.Column())\n")
fmt.Print("\t\treturn\n")
fmt.Print("\t}\n")
fmt.Print("\t\n")
	if m.Array {
fmt.Print("\tret._")
fmt.Printf("%v",  m.Name )
fmt.Print(", err = ParseAST")
fmt.Printf("%v",  t.Name )
fmt.Print("_")
fmt.Printf("%v",  m.Name )
fmt.Print("(p)\n")
fmt.Print("\tif err != nil {\n")
fmt.Print("\t\treturn\n")
fmt.Print("\t}\n")
	} else if m.Type.Kind() == "Bool" {
fmt.Print("\tret._")
fmt.Printf("%v",  m.Name )
fmt.Print(" = p.IsString()\n")
fmt.Print("\tp.Skip()\n")
	} else if m.Type.Kind() == "Lexical" {
		if m.Nullable {
fmt.Print("\tif p.IsString() {\n")
fmt.Print("\t\ts := p.String()\n")
fmt.Print("\t\tret._")
fmt.Printf("%v",  m.Name )
fmt.Print(" = &s\n")
fmt.Print("\t} else {\n")
fmt.Print("\t\tp.Skip()\n")
fmt.Print("\t}\n")
		} else {
fmt.Print("\tret._")
fmt.Printf("%v",  m.Name )
fmt.Print(" = p.String()\n")
		}
	} else {
fmt.Print("\tret._")
fmt.Printf("%v",  m.Name )
fmt.Print(", err = ParseAST")
fmt.Printf("%v",  m.Type.Common().Name )
fmt.Print("(p)\n")
fmt.Print("\tif err != nil {\n")
fmt.Print("\t\treturn\n")
fmt.Print("\t}\n")
	}
fmt.Print("\t\n")
}
fmt.Print("\t\n")
fmt.Print("\tif !p.IsEnd() {\n")
fmt.Print("\t\terr = fmt.Errorf(\"ParseAST")
fmt.Printf("%v",  t.Name )
fmt.Print(": Expected list end at %d:%d.\", p.Line(), p.Column())\n")
fmt.Print("\t\treturn\n")
fmt.Print("\t}\n")
fmt.Print("\tp.Up()\n")
fmt.Print("\t\n")
fmt.Print("\treturn\n")
fmt.Print("}\n")
for _, m := range t.Members {
	if !m.Array {
		continue
	}

	tn := goTypeName(m.Type)

fmt.Print("func ParseAST")
fmt.Printf("%v",  t.Name )
fmt.Print("_")
fmt.Printf("%v",  m.Name )
fmt.Print("(p *spl.SeqParser) (ret []")
fmt.Printf("%v",  tn )
fmt.Print(", err error) {\n")
fmt.Print("\tif !p.IsList() {\n")
fmt.Print("\t\terr = fmt.Errorf(\"ParseAST")
fmt.Printf("%v",  t.Name )
fmt.Print("_")
fmt.Printf("%v",  m.Name )
fmt.Print(": Expected list start at %d:%d.\", p.Line(), p.Column())\n")
fmt.Print("\t\treturn\n")
fmt.Print("\t}\n")
fmt.Print("\t\n")
fmt.Print("\tfor p.Down(); !p.IsEnd(); {\n")
	if m.Type.Kind() == "Lexical" {
fmt.Print("\t\tret = append(ret, p.String())\n")
	} else {
fmt.Print("\t\tx, e := ParseAST")
fmt.Printf("%v",  m.Type.Common().Name )
fmt.Print("(p)\n")
fmt.Print("\t\tif e != nil {\n")
fmt.Print("\t\t\treturn nil, e\n")
fmt.Print("\t\t}\n")
fmt.Print("\t\tret = append(ret, x)\n")
	}
fmt.Print("\t}\n")
fmt.Print("\t\n")
fmt.Print("\tp.Up()\n")
fmt.Print("\t\n")
fmt.Print("\treturn\n")
fmt.Print("}\n")
}
}
