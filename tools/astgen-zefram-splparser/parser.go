// This file was generated from goparser.go.tmpl, DO NOT MODIFY.

package main
import "fmt"
import "github.com/zarevucky/astgen"
func emitPrologue() {
fmt.Print("func box_string(s: string) (ret: own *string)\n")
fmt.Print("{\n")
fmt.Print("\tret = new(string)\n")
fmt.Print("\t*ret = s\n")
fmt.Print("}\n")
}
func emitOptionType(t *astgen.OptionType) {
fmt.Print("func parse_AST")
fmt.Printf("%v",  t.Name )
fmt.Print("(p: *spl.SeqParser, r: *spl.Reader) (ret: own *AST")
fmt.Printf("%v",  t.Name )
fmt.Print(")\n")
fmt.Print("{\n")
fmt.Print("\tif !p.is_list(r) {\n")
fmt.Print("\t\tenv.print(\"parse_AST")
fmt.Printf("%v",  t.Name )
fmt.Print(": Expected list start at \", p.line(), \":\", p.column(), \".\\n\")\n")
fmt.Print("\t\tfail BAD_INPUT, \"parse_AST")
fmt.Printf("%v",  t.Name )
fmt.Print(": Expected list start.\"\n")
fmt.Print("\t}\n")
fmt.Print("\t\n")
fmt.Print("\tp.down(r)\n")
fmt.Print("\t\n")
fmt.Print("\tif p.is_end(r) {\n")
fmt.Print("\t\tp.up(r)\n")
fmt.Print("\t\treturn null\n")
fmt.Print("\t}\n")
fmt.Print("\t\n")
fmt.Print("\tif !p.is_string(r) {\n")
fmt.Print("\t\tenv.print(\"parse_AST")
fmt.Printf("%v",  t.Name )
fmt.Print(": Expected string at \", p.line(), \":\", p.column(), \".\\n\")\n")
fmt.Print("\t\tfail BAD_INPUT, \"parse_AST")
fmt.Printf("%v",  t.Name )
fmt.Print(": Expected string.\"\n")
fmt.Print("\t}\n")
fmt.Print("\t\n")
fmt.Print("\tvar tag = p.string(r)\n")
fmt.Print("\t\n")
fmt.Print("\tif p.is_end(r) {\n")
fmt.Print("\t\tenv.print(\"parse_AST")
fmt.Printf("%v",  t.Name )
fmt.Print(": Unexpected list end at \", p.line(), \":\", p.column(), \".\\n\")\n")
fmt.Print("\t\tfail BAD_INPUT, \"parse_AST")
fmt.Printf("%v",  t.Name )
fmt.Print(": Unexpected list end.\"\n")
fmt.Print("\t}\n")
fmt.Print("\t\n")
fmt.Print("\tswitch tag\n")
for _, tn := range t.ConcreteTypes() {
fmt.Print("\tcase \"")
fmt.Printf("%v",  tn )
fmt.Print("\" {\n")
fmt.Print("\t\tret = parse_AST")
fmt.Printf("%v",  tn )
fmt.Print("(p, r)\n")
fmt.Print("\t}\n")
}
fmt.Print("\tdefault {\n")
fmt.Print("\t\tenv.print(\"parse_AST")
fmt.Printf("%v",  t.Name )
fmt.Print(": Unknown tag '\", tag, \"' before \", p.line(), \":\", p.column(), \".\\n\")\n")
fmt.Print("\t\tfail BAD_INPUT, \"parse_AST")
fmt.Printf("%v",  t.Name )
fmt.Print(": Unknown tag.\"\n")
fmt.Print("\t};;\n")
fmt.Print("\t\n")
fmt.Print("\tif !p.is_end(r) {\n")
fmt.Print("\t\tenv.print(\"parse_AST")
fmt.Printf("%v",  t.Name )
fmt.Print(": Expected list end at \", p.line(), \":\", p.column(), \".\\n\")\n")
fmt.Print("\t\tfail BAD_INPUT, \"parse_AST")
fmt.Printf("%v",  t.Name )
fmt.Print(": Expected list end.\"\n")
fmt.Print("\t}\n")
fmt.Print("\t\n")
fmt.Print("\tp.up(r)\n")
fmt.Print("\t\n")
fmt.Print("\treturn\n")
fmt.Print("}\n")
}
func emitEnumType(t *astgen.EnumType) {
fmt.Print("func parse_AST")
fmt.Printf("%v",  t.Name )
fmt.Print("(p: *spl.SeqParser, r: *spl.Reader) (ret: AST")
fmt.Printf("%v",  t.Name )
fmt.Print(")\n")
fmt.Print("{\n")
fmt.Print("\tif !p.is_string(r) {\n")
fmt.Print("\t\tenv.print(\"parse_AST")
fmt.Printf("%v",  t.Name )
fmt.Print(": Expected string at \", p.line(), \":\", p.column(), \".\\n\")\n")
fmt.Print("\t\tfail BAD_INPUT, \"parse_AST")
fmt.Printf("%v",  t.Name )
fmt.Print(": Expected string.\"\n")
fmt.Print("\t}\n")
fmt.Print("\t\n")
fmt.Print("\tvar tag = p.string(r)\n")
fmt.Print("\t\n")
fmt.Print("\tswitch tag\n")
for i, tok := range t.EnumTokens {
fmt.Print("\tcase \"")
fmt.Printf("%v",  tok.Name )
fmt.Print("\" {\n")
fmt.Print("\t\tret.value = ")
fmt.Printf("%v",  i )
fmt.Print("\n")
fmt.Print("\t\treturn\n")
fmt.Print("\t}\n")
}
fmt.Print("\tdefault {\n")
fmt.Print("\t\tenv.print(\"parse_AST")
fmt.Printf("%v",  t.Name )
fmt.Print(": Unknown tag '\", tag, \"' before \", p.line(), \":\", p.column(), \".\\n\")\n")
fmt.Print("\t\tfail BAD_INPUT, \"parse_AST")
fmt.Printf("%v",  t.Name )
fmt.Print(": Unknown tag.\"\n")
fmt.Print("\t};;\n")
fmt.Print("}\n")
}
func emitStructType(t *astgen.StructType) {
fmt.Print("func parse_AST")
fmt.Printf("%v",  t.Name )
fmt.Print("(p: *spl.SeqParser, r: *spl.Reader) (ret: *AST")
fmt.Printf("%v",  t.Name )
fmt.Print(")\n")
fmt.Print("{\n")
fmt.Print("\tif !p.is_list(r) {\n")
fmt.Print("\t\tenv.print(\"parse_AST")
fmt.Printf("%v",  t.Name )
fmt.Print(": Expected list start at \", p.line(), \":\", p.column(), \".\\n\")\n")
fmt.Print("\t\tfail BAD_INPUT, \"parse_AST")
fmt.Printf("%v",  t.Name )
fmt.Print(": Expected list start.\"\n")
fmt.Print("\t}\n")
fmt.Print("\t\n")
fmt.Print("\tp.down(r)\n")
fmt.Print("\t\n")
fmt.Print("\tif p.is_end(r) {\n")
fmt.Print("\t\tp.up(r)\n")
fmt.Print("\t\treturn null\n")
fmt.Print("\t}\n")
fmt.Print("\t\n")
fmt.Print("\tret = new(AST")
fmt.Printf("%v",  t.Name )
fmt.Print(")\n")
for _, m := range t.Members {
fmt.Print("\t\n")
fmt.Print("\tif p.is_end(r) {\n")
fmt.Print("\t\tenv.print(\"parse_AST")
fmt.Printf("%v",  t.Name )
fmt.Print(": Unexpected list end at \", p.line(), \":\", p.column(), \".\\n\")\n")
fmt.Print("\t\tfail BAD_INPUT, \"parse_AST")
fmt.Printf("%v",  t.Name )
fmt.Print(": Unexpected list end.\"\n")
fmt.Print("\t}\n")
fmt.Print("\t\n")
	if m.Array {
fmt.Print("\tret._")
fmt.Printf("%v",  m.Name )
fmt.Print(" = parse_AST")
fmt.Printf("%v",  t.Name )
fmt.Print("_")
fmt.Printf("%v",  m.Name )
fmt.Print("(p, r)\n")
	} else if m.Type.Kind() == "Bool" {
fmt.Print("\tret._")
fmt.Printf("%v",  m.Name )
fmt.Print(" = p.is_string(r)\n")
fmt.Print("\tp.skip(r)\n")
	} else if m.Type.Kind() == "Lexical" {
		if m.Nullable {
fmt.Print("\tif p.is_string(r) {\n")
fmt.Print("\t\tret._")
fmt.Printf("%v",  m.Name )
fmt.Print(" = box_string(p.string(r))\n")
fmt.Print("\t} else {\n")
fmt.Print("\t\tp.skip(r)\n")
fmt.Print("\t}\n")
		} else {
fmt.Print("\tret._")
fmt.Printf("%v",  m.Name )
fmt.Print(" = p.string(r)\n")
		}
	} else {
fmt.Print("\tret._")
fmt.Printf("%v",  m.Name )
fmt.Print(" = parse_AST")
fmt.Printf("%v",  m.Type.Common().Name )
fmt.Print("(p, r)\n")
	}
fmt.Print("\t\n")
}
fmt.Print("\t\n")
fmt.Print("\tif !p.is_end(r) {\n")
fmt.Print("\t\tenv.print(\"parse_AST")
fmt.Printf("%v",  t.Name )
fmt.Print(": Expected list end at \", p.line(), \":\", p.column(), \".\\n\")\n")
fmt.Print("\t\tfail BAD_INPUT, \"parse_AST")
fmt.Printf("%v",  t.Name )
fmt.Print(": Expected list end.\"\n")
fmt.Print("\t}\n")
fmt.Print("\tp.up(r)\n")
fmt.Print("\t\n")
fmt.Print("\treturn\n")
fmt.Print("}\n")
for _, m := range t.Members {
	if !m.Array {
		continue
	}

	tn := zeframTypeName(m.Type)

fmt.Print("func parse_AST")
fmt.Printf("%v",  t.Name )
fmt.Print("_")
fmt.Printf("%v",  m.Name )
fmt.Print("(p: *spl.SeqParser, r: *spl.Reader) (ret: own *[]")
fmt.Printf("%v",  tn )
fmt.Print(")\n")
fmt.Print("{\n")
fmt.Print("\tif !p.is_list(r) {\n")
fmt.Print("\t\tenv.print(\"parse_AST")
fmt.Printf("%v",  t.Name )
fmt.Print("_")
fmt.Printf("%v",  m.Name )
fmt.Print(": Expected list start at \", p.line(), \":\", p.column(), \".\\n\")\n")
fmt.Print("\t\tfail BAD_INPUT, \"parse_AST")
fmt.Printf("%v",  t.Name )
fmt.Print("_")
fmt.Printf("%v",  m.Name )
fmt.Print(": Expected list start.\"\n")
fmt.Print("\t}\n")
fmt.Print("\t\n")
fmt.Print("\tvar count = 0\n")
fmt.Print("\tret = new[1](")
fmt.Printf("%v",  tn )
fmt.Print(")\n")
fmt.Print("\t\n")
fmt.Print("\tp.down(r)\n")
fmt.Print("\t\n")
fmt.Print("\twhile !p.is_end(r) {\n")
fmt.Print("\t\tif count == len(ret) {\n")
fmt.Print("\t\t\tvar new_size = 2*len(ret)\n")
fmt.Print("\t\t\tret = resize(@ret, new_size)\n")
fmt.Print("\t\t}\n")
fmt.Print("\t\n")
	if m.Type.Kind() == "Lexical" {
fmt.Print("\t\tret[count] = p.string(r)\n")
	} else {
fmt.Print("\t\tret[count] = parse_AST")
fmt.Printf("%v",  m.Type.Common().Name )
fmt.Print("(p, r)\n")
	}
fmt.Print("\t\t\n")
fmt.Print("\t\tcount++\n")
fmt.Print("\t}\n")
fmt.Print("\t\n")
fmt.Print("\tp.up(r)\n")
fmt.Print("\t\n")
fmt.Print("\treturn resize(@ret, count)\n")
fmt.Print("}\n")
}
}
