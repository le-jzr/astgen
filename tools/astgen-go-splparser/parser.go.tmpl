//// This file was generated from goparser.go.tmpl, DO NOT MODIFY.
//
// package main
// import "fmt"
// import "github.com/zarevucky/astgen"

// func emitOptionType(t *astgen.OptionType) {
func ParseAST/* t.Name */(p *spl.SeqParser) (ret AST/* t.Name */, err error) {
	if !p.IsList() {
		err = fmt.Errorf("ParseAST/* t.Name */: Expected list start at %d:%d.", p.Line(), p.Column())
		return
	}
	
	p.Down()
	
	if p.IsEnd() {
		p.Up()
		return nil, nil
	}
	
	if !p.IsString() {
		err = fmt.Errorf("ParseAST/* t.Name */: Expected string at %d:%d.", p.Line(), p.Column())
		return
	}
	
	tag := p.String()
	
	if p.IsEnd() {
		err = fmt.Errorf("ParseAST/* t.Name */: Unexpected list end at %d:%d.", p.Line(), p.Column())
		return
	}
	
	switch tag {
	// for _, tn := range t.ConcreteTypes() {
	case "/* tn */":
		ret, err = ParseAST/* tn */(p)
	// }
	default:
		err = fmt.Errorf("ParseAST/* t.Name */: Unknown tag %s before %d:%d.", tag, p.Line(), p.Column())
		return
	}
	
	if err != nil {
		return
	}
	
	if !p.IsEnd() {
		err = fmt.Errorf("ParseAST/* t.Name */: Expected list end at %d:%d.", p.Line(), p.Column())
		return
	}
	
	p.Up()
	
	return ret, nil
}
// }

// func emitEnumType(t *astgen.EnumType) {
func ParseAST/* t.Name */(p *spl.SeqParser) (ret AST/* t.Name */, err error) {
	if !p.IsString() {
		err = fmt.Errorf("ParseAST/* t.Name */: Expected string at %d:%d.", p.Line(), p.Column())
		return
	}
	
	tag := p.String()
	
	switch tag {
	// for _, tok := range t.EnumTokens {
	case "/* tok.Name */":
		return AST/* t.Name */_/* tok.Name */
	// }
	default:
		err = fmt.Errorf("ParseAST/* t.Name */: Unknown tag %s before %d:%d.", p.Line(), p.Column())
		return
	}
}
// }

// func goTypeName(t astgen.Type) string {
//	switch t.(type) {
//	case *astgen.StructType:
//		return "*AST" + t.Common().Name
//	case *astgen.LexicalType:
//		return "string"
//	case *astgen.BoolType:
//		return "bool"
//	default:
//		return "AST" + t.Common().Name
//	}
// }

// func emitStructType(t *astgen.StructType) {
func ParseAST/* t.Name */(p *spl.SeqParser) (ret *AST/* t.Name */, err error) {
	if !p.IsList() {
		err = fmt.Errorf("ParseAST/* t.Name */: Expected list start at %d:%d.", p.Line(), p.Column())
		return
	}
	
	p.Down()
	
	if p.IsEnd() {
		p.Up()
		return nil
	}
	
	ret = new(AST/* t.Name */)

	// for _, m := range t.Members {
	
	if p.IsEnd() {
		err = fmt.Errorf("ParseAST/* t.Name */: Unexpected list end at %d:%d.", p.Line(), p.Column())
		return
	}
	
	// 	if m.Array {
	ret._/* m.Name */, err = ParseAST/* t.Name */_/* m.Name */(p)
	if err != nil {
		return
	}
	// 	} else if m.Type.Kind() == "Bool" {
	ret._/* m.Name */ = p.IsString()
	p.Skip()
	// 	} else if m.Type.Kind() == "Lexical" {
	// 		if m.Nullable {
	if p.IsString() {
		s := p.String()
		ret._/* m.Name */ = &s
	} else {
		p.Skip()
	}
	//		} else {
	ret._/* m.Name */ = p.String()
	// 		}
	// 	} else {
	ret._/* m.Name */, err = ParseAST/* m.Type.Common().Name */(p)
	if err != nil {
		return
	}
	// 	}
	
	// }
	
	if !p.IsEnd() {
		err = fmt.Errorf("ParseAST/* t.Name */: Expected list end at %d:%d.", p.Line(), p.Column())
		return
	}
	p.Up()
	
	return
}

// for _, m := range t.Members {
// 	if !m.Array {
//		continue
//	}
//
//	tn := goTypeName(m.Type)
//
func ParseAST/* t.Name */_/* m.Name */(p *spl.SeqParser) (ret []/* tn */, err error) {
	if !p.IsList() {
		err = fmt.Errorf("ParseAST/* t.Name */_/* m.Name */: Expected list start at %d:%d.", p.Line(), p.Column())
		return
	}
	
	for p.Down(); !p.IsEnd(); {
		//	if m.Type.Kind() == "Lexical" {
		ret = append(ret, p.String())
		//	} else {
		x, e := ParseAST/* m.Type.Common().Name */(p)
		if e != nil {
			return nil, e
		}
		ret = append(ret, x)
		//	}
	}
	
	p.Up()
	
	return ret
}
// }
// }
